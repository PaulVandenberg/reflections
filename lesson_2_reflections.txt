Initializing a Repository
	What happens when you initialize a repository? Why do you need to do it?
		Creates  .git folder and files. Does not create a commit though.

Staging Area
	How is the staging area different from the working directory and the repository? What value do you think it offers?
		Files are created in the working directory. They can then be added to the staging area, and then they are ready to be committed. The commits then are part of the repository.

Commit Size
	How can you use the staging area to make sure you have one commit per logical change?
		Files with changes can be added to the staging area and committed one at a time.

When to Use Branches
	What are some situations when branches would be helpful in keeping your history organized? How would branches help?
		New feature sets, building new versions of the software. Anything beyond single feature or bug fix. Break away to work on various smaller projects. Multiple branches makes each person able to checkout and work on various parts at the same time.

Visualizing with Diagrams
	How do the diagrams help you visualize the branch structure?
		The branching structure of git projects can become confusing. Diagrams make it easier to conceptualize.

Merging Two Branches
	What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
		Merging two branches brings the code from each branch together and brings it into agreement.

Reflect: Automatic vs. Manual Merging
	What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
		When merging, Git balances the risk of creating a commit that is messed up with automatically resolving conflicts. If it was all done automatically, the code would become a mess. Some conflict require a user involvement to resolve.

